Link: https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/

Step 1: Install Kubernetes Servers

Launch 3 ubuntu 20.04  machines

Server Type	         Server Hostname	        Specs
Master	                k8s_master	           4GB Ram, 2vcpus
Worker	                k8s_node1	           4GB Ram, 2vcpus
Worker	                k8s_node2	           4GB Ram, 2vcpus

sudo apt update

sudo apt -y full-upgrade

Step 2: Install kubelet, kubeadm and kubectl

sudo apt -y install curl apt-transport-https

curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update

sudo apt -y install vim git curl wget kubelet kubeadm kubectl

sudo apt-mark hold kubelet kubeadm kubectl

kubeadm version

Step 3: Disable Swap

sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

sudo swapoff -a

sudo mount -a

free -h

# Enable kernel modules

sudo modprobe overlay

sudo modprobe br_netfilter

# Add some settings to sysctl

sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

# Reload sysctl

sudo sysctl --system

Step 4: Install Container runtime

To run containers in Pods, Kubernetes uses a container runtime. Supported container runtimes are:

Docker
CRI-O
Containerd

Here we are choosing Docker

Step 5: Installing Docker CE runtime

# Add repo and Install packages

sudo apt update

sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

sudo apt update

sudo apt install -y containerd.io docker-ce docker-ce-cli

# Create required directories

sudo mkdir -p /etc/systemd/system/docker.service.d

# Create daemon json config file

sudo tee /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

# Start and enable Services

sudo systemctl daemon-reload

sudo systemctl restart docker

sudo systemctl enable docker

systemctl status docker

### Debian based systems ###

sudo apt update

sudo apt install git wget curl

VER=$(curl -s https://api.github.com/repos/Mirantis/cri-dockerd/releases/latest|grep tag_name | cut -d '"' -f 4|sed 's/v//g')

echo $VER

wget https://github.com/Mirantis/cri-dockerd/releases/download/v${VER}/cri-dockerd-${VER}.amd64.tgz

tar xvf cri-dockerd-${VER}.amd64.tgz

sudo mv cri-dockerd/cri-dockerd /usr/local/bin/

cri-dockerd --version

wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service

wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket

sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/

sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service

sudo systemctl daemon-reload

sudo systemctl enable cri-docker.service

sudo systemctl enable --now cri-docker.socket

systemctl status cri-docker.socket

Step 6: Initialize master node

On master:

lsmod | grep br_netfilter

sudo systemctl enable kubelet

sudo kubeadm config images pull --cri-socket unix:///run/cri-dockerd.sock

sudo sysctl -p

sudo kubeadm init \
  --pod-network-cidr=192.168.0.0/16 \
  --cri-socket unix:///run/cri-dockerd.sock 
  
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
  kubectl cluster-info
  
  on all nodes:
  kubeadm join 172.31.22.183:6443 --token sxayaf.lz8ptz9d6zo9191s \
        --discovery-token-ca-cert-hash sha256:c8a5a1119b24dbae468d27e1f0a29a43ac347bf03f97a5601f1536b519528d8c --cri-socket /run/cri-dockerd.sock
        
Step 7: Install network plugin on Master

kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
